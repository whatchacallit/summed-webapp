[{"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\index.tsx":"1","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\reportWebVitals.ts":"2","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\App.tsx":"3","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\Analyze.tsx":"4","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UploadDocument.tsx":"5","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\home\\Home.tsx":"6","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\QuestionCard.tsx":"7","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UploadCard.tsx":"8","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UrlCard.tsx":"9","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\Contexts.tsx":"10","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\ResultPage.tsx":"11","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\ReadableContent.tsx":"12","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\StartPage.tsx":"13","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\AnalyzingSpinnerPage.tsx":"14","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\DefinitionPopover.tsx":"15","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\index.tsx":"16","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\reportWebVitals.ts":"17","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\App.tsx":"18","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\Analyze.tsx":"19","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\home\\Home.tsx":"20","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\AnalyzingSpinnerPage.tsx":"21","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\Contexts.tsx":"22","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\StartPage.tsx":"23","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\ResultPage.tsx":"24","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\UrlCard.tsx":"25","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\UploadCard.tsx":"26","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\ReadableContent.tsx":"27","C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\DefinitionPopover.tsx":"28"},{"size":570,"mtime":1611163253160,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1875,"mtime":1612205068339,"results":"32","hashOfConfig":"30"},{"size":7638,"mtime":1613040398911,"results":"33","hashOfConfig":"30"},{"size":214,"mtime":1610295791981,"results":"34","hashOfConfig":"30"},{"size":413,"mtime":1612201644266,"results":"35","hashOfConfig":"30"},{"size":825,"mtime":1610305167933,"results":"36","hashOfConfig":"30"},{"size":2364,"mtime":1611247147168,"results":"37","hashOfConfig":"30"},{"size":1932,"mtime":1612205145608,"results":"38","hashOfConfig":"30"},{"size":1681,"mtime":1612201553153,"results":"39","hashOfConfig":"30"},{"size":8130,"mtime":1611675977499,"results":"40","hashOfConfig":"30"},{"size":7572,"mtime":1611658797674,"results":"41","hashOfConfig":"30"},{"size":890,"mtime":1611248253823,"results":"42","hashOfConfig":"30"},{"size":557,"mtime":1611605077030,"results":"43","hashOfConfig":"30"},{"size":4240,"mtime":1612194792441,"results":"44","hashOfConfig":"30"},{"size":586,"mtime":1621105287964,"results":"45","hashOfConfig":"46"},{"size":440,"mtime":1621105287965,"results":"47","hashOfConfig":"46"},{"size":1964,"mtime":1621105287956,"results":"48","hashOfConfig":"46"},{"size":7638,"mtime":1621105287957,"results":"49","hashOfConfig":"46"},{"size":413,"mtime":1621105287963,"results":"50","hashOfConfig":"46"},{"size":557,"mtime":1621105287957,"results":"51","hashOfConfig":"46"},{"size":1681,"mtime":1621105287958,"results":"52","hashOfConfig":"46"},{"size":890,"mtime":1621105287961,"results":"53","hashOfConfig":"46"},{"size":8130,"mtime":1621105287960,"results":"54","hashOfConfig":"46"},{"size":1932,"mtime":1621105287962,"results":"55","hashOfConfig":"46"},{"size":2364,"mtime":1621105287961,"results":"56","hashOfConfig":"46"},{"size":7572,"mtime":1621105287960,"results":"57","hashOfConfig":"46"},{"size":4240,"mtime":1621105287958,"results":"58","hashOfConfig":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1w3l57a",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"970wsc",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\index.tsx",[],["128","129"],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\reportWebVitals.ts",[],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\App.tsx",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import React, { FC, useState } from 'react';\nimport './App.less';\n\nimport { Layout, Menu, Image, Avatar, Space, Steps } from 'antd';\n\n\n// see https://ant.design/components/icon/\nimport {\n  UploadOutlined, UserOutlined,\n  VideoCameraOutlined, AudioFilled,\n  LinkOutlined, MedicineBoxTwoTone,\n  CameraOutlined,\n  BulbOutlined,\n  ControlOutlined,\n  ExperimentOutlined,\n  FilePdfOutlined,\n  FileWordOutlined,\n  FilePptOutlined,\n  FileUnknownOutlined,\n  HomeOutlined,\n  IdcardOutlined,\n  MessageOutlined,\n  LoadingOutlined,\n  NodeIndexOutlined,\n  PartitionOutlined,\n  PaperClipOutlined,\n  RobotOutlined,\n  SettingOutlined,\n  SoundOutlined,\n  StarOutlined,\n  StarFilled,\n  TagsOutlined,\n  TranslationOutlined\n} from '@ant-design/icons';\nimport Analyze from './analyze/Analyze';\nimport HomePage from './home/Home';\n\nimport Title from 'antd/lib/typography/Title';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst { Header, Content, Footer, Sider } = Layout;\n\n\n\n\nconst App: FC = () => (\n  <Layout style={{ height: '100%' }}>\n\n    <Layout style={{ height: '100%' }}>\n\n      <Content style={{ padding: '0 0 0', height: '100vh' }}>\n        <div className=\"site-layout-background\" style={{ padding: 30, minHeight: 0, height: \"100%\" }}>\n          <Router>\n\n\n            <Switch>\n\n\n              {/* Route: Document Analysis*/}\n              <Route path=\"/analyze\">\n                <Analyze />\n              </Route>\n\n              {/* Route: Home*/}\n              <Route exact path=\"/\">\n                <HomePage />\n              </Route>\n\n\n            </Switch>\n          </Router>\n\n        </div>\n      </Content>\n\n      {/*       <Footer style={{ textAlign: 'center' }}>© 2021 by MedJargonBuster Team <a href=\"https://medjargonbuster.com\">https://medjargonbuster.com</a></Footer>\n */}\n    </Layout>\n  </Layout >);\n\n\nexport default App;\n","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\Analyze.tsx",["169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, { FC, useEffect, useState } from 'react';\r\nimport '../App.less';\r\n\r\nimport { Button, Divider, message, PageHeader, Steps } from 'antd';\r\nimport {\r\n    HomeOutlined,\r\n    FileTextTwoTone,\r\n    HourglassTwoTone,\r\n    HeartTwoTone,\r\n    SettingTwoTone,\r\n    ProfileTwoTone,\r\n    QuestionCircleTwoTone,\r\n    CompassTwoTone,\r\n\r\n} from '@ant-design/icons';\r\n\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\n\r\n\r\nimport { BrowserRouter as Router, Route, Switch, useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport { AnalysisContext, IAnalysisOptions, IPipelineResult } from './Contexts';\r\n\r\nimport StartPage from './StartPage';\r\nimport AnalyzingSpinnerPage from './AnalyzingSpinnerPage';\r\nimport ResultPage from './ResultPage';\r\n\r\n\r\nconst { Step } = Steps\r\n\r\n\r\n\r\n\r\n/**\r\n * routes corresponding to steps in the process\r\n */\r\nconst ROUTES = {\r\n    start: \"/analyze\",\r\n    analyzing: \"/analyze/loading\",\r\n    done: \"/analyze/results\",\r\n    error: \"/analyze/error\"\r\n}\r\n\r\nconst API_BASE_URL = \"http://localhost:5000\"\r\n\r\nconst EXTRACT_TEXT_ENDPOINT_URL = `${API_BASE_URL}/extract`\r\nconst RUN_PIPELINE_ENDPOINT_URL = `${API_BASE_URL}/pipeline/default`\r\n\r\n\r\n\r\nconst AnalyzePage: FC = () => {\r\n    const [extractionResult, setExtractionResult] = React.useState<IPipelineResult>({})\r\n    const [analysisResult, setAnalysisResult] = React.useState<IPipelineResult>({})\r\n    const [isExtracting, setExtracting] = useState(false)\r\n    const [isAnalyzing, setAnalyzing] = useState(false)\r\n    const [hasResult, setHasResult] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n\r\n    const defaultOptions: IAnalysisOptions = {\r\n        autoTranslate: true,\r\n        autoTranslateLanguage: \"de-CH\",\r\n\r\n    }\r\n    const [options, setOptions] = useState(defaultOptions) // TODO localstorage / Cookie ?\r\n\r\n    const [currentStep, setCurrentStep] = useState(0)\r\n\r\n\r\n    let location = useLocation()\r\n\r\n\r\n    /** \r\n     * This hook is triggered whenever the \"location\" changes (e.g. by history.push) via the router.\r\n     * (extraction results are set by the child components that call the \"extract\" API endpoint)\r\n     */\r\n    useEffect(() => {\r\n        //console.log(\"location changed\", location)\r\n        //console.log(\"Current step is \", currentStep)\r\n    }, [location])\r\n\r\n\r\n    /**\r\n     * If we have an extraction result ready, start the Analysis\r\n     */\r\n    useEffect(() => {\r\n        console.log(\"Some result changed...\")\r\n        if (extractionResult.text && !analysisResult.text && !hasError) {\r\n            console.log(\"Received extraction result, starting Analysis...\")\r\n            setCurrentStep(1)\r\n            startAnalysis(extractionResult);\r\n        }\r\n        else if (analysisResult.text && !hasError) {\r\n            console.log(\"Received analysis result, showing results...\")\r\n            setCurrentStep(2)\r\n        }\r\n\r\n\r\n    }, [extractionResult, analysisResult]);\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Clears the context and starts over\r\n     */\r\n    const back_to_start = () => {\r\n\r\n\r\n        setAnalysisResult({})\r\n        setExtractionResult({})\r\n        setExtracting(false)\r\n        setAnalyzing(false)\r\n        setHasResult(false)\r\n        setHasError(false)\r\n\r\n        setCurrentStep(0)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Starts the analysis by calling the backend.\r\n     * \r\n     * \r\n     * @param extractionResult \r\n     */\r\n    const startAnalysis = async (extractionResult: IPipelineResult) => {\r\n        setAnalyzing(true)\r\n        setCurrentStep(1)\r\n\r\n        const pipelineExecutionRequest = {\r\n            \"text\": extractionResult.text,\r\n            \"meta\": extractionResult.meta,\r\n            \"settings\": { \"disable\": [\"ner\"] }\r\n        }\r\n\r\n        //console.log(\"Starting analysis of extracted text\", extractionResult.text, extractionResult.meta)\r\n        const options = {\r\n            method: \"POST\",\r\n            body: JSON.stringify(pipelineExecutionRequest),\r\n            headers: {\r\n                \"accept\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        const response = await fetch(RUN_PIPELINE_ENDPOINT_URL, options);\r\n        if (response.status >= 200 && response.status <= 299) {\r\n            const jsonResponse = await response.json();\r\n            //message.success(`Text Analysis was successfully...`);\r\n            setAnalysisResult({\r\n                meta: jsonResponse['meta'],\r\n                text: jsonResponse['text']\r\n            })\r\n            setAnalyzing(false)\r\n            setHasResult(true)\r\n            setCurrentStep(2)\r\n\r\n\r\n        } else {\r\n            message.success(`There was an Error...`);\r\n            console.log(\"Error while analyzing: \", response.status, response.statusText)\r\n            setAnalyzing(false)\r\n            setHasResult(false)\r\n            setHasError(true)\r\n            setCurrentStep(0)\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // body depends on the step\r\n    let body = null;\r\n\r\n    // TODO I tried with react router, but had more issues than benefit. \r\n    // Is there a better way? \r\n    switch (currentStep) {\r\n        case 0: body = <StartPage />; break;\r\n        case 1: body = <AnalyzingSpinnerPage />; break;\r\n        case 2: body = <ResultPage />; break;\r\n        default: body = <StartPage />\r\n    }\r\n\r\n    const getStepStatus = (step: number) => {\r\n        // error, finish, process, wait\r\n        if (step < currentStep) {\r\n            return \"finish\"\r\n        }\r\n        if (step == currentStep) {\r\n            return \"process\"\r\n        }\r\n        if (step > currentStep) {\r\n            return \"wait\"\r\n        }\r\n\r\n    }\r\n\r\n    const avatarTitle = [\r\n        \"Hi Florian\",\r\n        \"Ok, let's see...\",\r\n        \"Here's what I got \"\r\n    ]\r\n\r\n    const avatarSubTitle = [\r\n        \"can I help you understand some medical jargon?\",\r\n        \"I'm analyzing the document for you, please wait\",\r\n        \"Let me know if you have more questions\"\r\n    ]\r\n\r\n    const stepTitles = [\r\n        \"Original\",\r\n        \"MedJargonBuster\",\r\n        \"Summary\"\r\n    ]\r\n\r\n\r\n    return (\r\n        <AnalysisContext.Provider value={{\r\n            extractionResult, setExtractionResult, analysisResult, setAnalysisResult,\r\n            isExtracting, setExtracting, isAnalyzing, setAnalyzing,\r\n            hasError, setHasError, hasResult, setHasResult, options, setOptions\r\n        }}>\r\n\r\n            <div style={{ height: '100%', alignContent: \"center\", padding: \"5px\" }}>\r\n\r\n                <Steps style={{ paddingBottom: 30 }} direction=\"horizontal\" size=\"default\" current={currentStep}>\r\n                    <Step status={getStepStatus(0)} title={stepTitles[0]} icon={<FileTextTwoTone twoToneColor=\"#2ab88f\" />} />\r\n                    <Step status={getStepStatus(1)} title={stepTitles[1]} icon={<CompassTwoTone twoToneColor=\"#2ab88f\" spin={isAnalyzing} />} />\r\n                    <Step status={getStepStatus(2)} title={stepTitles[2]} icon={<ProfileTwoTone twoToneColor=\"#2ab88f\" />} />\r\n                </Steps>\r\n\r\n\r\n                <PageHeader\r\n                    style={{ textAlign: 'center' }}\r\n                    className=\"site-page-header\"\r\n\r\n                    avatar={{ src: '/img/avatar.png', shape: \"circle\" }}\r\n                    title={avatarTitle[currentStep]}\r\n                    subTitle={avatarSubTitle[currentStep]}\r\n                    extra={[\r\n                        <Button onClick={back_to_start}><HomeOutlined /></Button>,\r\n                    ]}\r\n                />\r\n\r\n                <Divider type=\"horizontal\" style={{ paddingBottom: 30 }}></Divider>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {body}\r\n\r\n\r\n            </div >\r\n        </AnalysisContext.Provider>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default AnalyzePage","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UploadDocument.tsx",[],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\home\\Home.tsx",[],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\QuestionCard.tsx",["182"],"import { FC } from 'react';\r\nimport '../App.less';\r\n\r\nimport { Card, Input } from 'antd';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport Search from 'antd/lib/input/Search';\r\n\r\n\r\nimport { AudioOutlined } from '@ant-design/icons';\r\n\r\nconst cardStyle = {\r\n    height: '100%'\r\n};\r\n\r\nconst QuestionCard: FC = () => (\r\n    <>\r\n        <Card hoverable={true} style={cardStyle}>\r\n            <Paragraph>\r\n                I have some other questions about the MedJargonBuster program.\r\n                </Paragraph>\r\n            <Search\r\n                placeholder=\"(Please type or speak your question...)\"\r\n                enterButton=\"Ask\"\r\n                size=\"large\"\r\n                suffix={<AudioOutlined style={{ fontSize: 16 }} />}\r\n            />\r\n        </Card>\r\n    </>\r\n)\r\n\r\nexport default QuestionCard",["183","184"],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UploadCard.tsx",["185","186"],"import { FC, useState } from 'react';\r\nimport '../App.less';\r\n\r\nimport { Card, Upload, message } from 'antd';\r\nimport { UploadChangeParam, UploadProps } from 'antd/lib/upload';\r\n\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\nimport { useAnalysisContext } from './Contexts';\r\n\r\n\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst EXTRACT_UPLOAD_ENDPOINT_URL = \"http://localhost:5000/extract/upload\"\r\n\r\n\r\n\r\nconst cardStyle = {\r\n    height: '100%'\r\n\r\n};\r\n\r\n\r\nconst UploadCard: FC = () => {\r\n\r\n    const ctx = useAnalysisContext()\r\n\r\n\r\n    const onUploadProgress = (info: UploadChangeParam) => {\r\n        const { status } = info.file;\r\n\r\n        if (status !== 'uploading') {\r\n            ctx.setExtracting(true)\r\n\r\n\r\n            //console.log(\"Uploading\", info.file, info.fileList);\r\n        }\r\n        if (status === 'done') {\r\n            ctx.setExtracting(false)\r\n            ctx.setExtractionResult({\r\n                text: info.file.response.text,\r\n                meta: info.file.response.meta\r\n            })\r\n\r\n            //message.success(`${info.file.name} file uploaded successfully.`);\r\n\r\n\r\n\r\n        } else if (status === 'error') {\r\n            ctx.setExtracting(false)\r\n            ctx.setHasError(true)\r\n\r\n            message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * see https://ant.design/components/upload/#API\r\n     */\r\n    const uploadProps = {\r\n        name: 'file',\r\n        multiple: false,\r\n        maxCount: 1,\r\n        action: EXTRACT_UPLOAD_ENDPOINT_URL,\r\n        onChange: onUploadProgress\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card hoverable={true} style={cardStyle}>\r\n                <Paragraph>\r\n                    Upload a scan or photo of a medical report or other text.\r\n                 </Paragraph>\r\n\r\n                <Dragger {...uploadProps}>\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                        <UploadOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag a file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                        max. 1 MB. e.g. pdf, jpeg, png, doc/docx, ppt, ...</p>\r\n\r\n\r\n                </Dragger>\r\n\r\n            </Card>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadCard","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\UrlCard.tsx",["187","188"],"import '../App.less';\r\n\r\nimport { Card, message } from 'antd';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport Search from 'antd/lib/input/Search';\r\nimport { useAnalysisContext } from './Contexts';\r\nimport AnchorLink from 'antd/lib/anchor/AnchorLink';\r\n\r\nconst cardStyle = {\r\n    height: '100%'\r\n};\r\n\r\n\r\nconst EXTRACT_URL_ENDPOINT_URL = \"http://localhost:5000/extract\"\r\n\r\n\r\n\r\nfunction UrlCard() {\r\n\r\n    const ctx = useAnalysisContext()\r\n\r\n\r\n    const extractFromUrl = (value: string) => {\r\n        ctx.setExtracting(true);\r\n\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"accept\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        fetch(EXTRACT_URL_ENDPOINT_URL + \"?url=\" + value, options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                ctx.setExtracting(false);\r\n\r\n                //message.success(`Url loaded successfully`);\r\n\r\n                ctx.setExtractionResult({\r\n                    meta: json['meta'],\r\n                    text: json['text']\r\n                })\r\n                console.log(json)\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (<>\r\n        <Card hoverable={true} style={cardStyle}>\r\n            <Paragraph>\r\n                Analyze some public health information from the internet.\r\n                For example, a news article,blog, research document\r\n                </Paragraph>\r\n            <Search\r\n                loading={ctx.isExtracting}\r\n                placeholder=\"URL\"\r\n                enterButton=\"Analyze\"\r\n                onSearch={extractFromUrl}\r\n                size=\"large\"\r\n            />\r\n            e.g.\r\n            <Paragraph type=\"secondary\" copyable={true} >https://www.newswise.com/articles/breast-cancer-screening-by-age-40-or-younger-for-black-women-advise-beaumont-researchers</Paragraph>\r\n        </Card>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default UrlCard","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\Contexts.tsx",[],"C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\ResultPage.tsx",["189","190","191","192","193","194","195","196","197"],"import { CSSProperties } from 'react';\r\nimport '../App.less';\r\n\r\n\r\nimport { Card, Row, Col, Typography, Space, Statistic, Rate, Divider, Tabs, Radio } from 'antd';\r\nimport { useAnalysisContext } from './Contexts';\r\nimport moment from 'moment'\r\n\r\nimport ReadableContent from './ReadableContent';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\n\r\n\r\nimport {\r\n    FilePdfOutlined, GlobalOutlined,\r\n    SolutionOutlined, FileUnknownOutlined, TranslationOutlined, HighlightOutlined,\r\n    MedicineBoxOutlined, LineChartOutlined, PartitionOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Text, Title, Link } = Typography;\r\n\r\nconst { TabPane } = Tabs\r\n\r\n\r\nconst IR_TOKEN_URL = \"http://localhost:5000/getIRToken\"\r\n\r\nfunction ResultPage() {\r\n\r\n    const ctx = useAnalysisContext()\r\n\r\n    // shorten this a bit...\r\n    const d = ctx.analysisResult.meta\r\n    console.log(\"Result meta:\", d)\r\n\r\n    //var summaryText = d.summaryText\r\n    var summaryHTML = d.summary_sentences.join(\"<li>\")\r\n    var doc_language = d.document_language || \"en\"\r\n    var doc_title = d.title || \"(No Title)\"\r\n    var doc_authors = Array(d.Author).join(\", \") || \"(Unknown Author)\"\r\n    var doc_classification = d.source || \"unknown\"\r\n    var doc_extractor = d.extractor;\r\n    var doc_type = d.document_type;\r\n\r\n\r\n    //FIXME get this from backend\r\n    var creation_date = moment(d[\"Creation-Date\"]) || moment(\"2020-08-01 12:36\", \"YYYY-MM-DD hh:mm\")\r\n    var doc_create_date = creation_date.format('MMMM Do YYYY, hh:mm');\r\n    var doc_create_age = creation_date.fromNow();\r\n\r\n    var doc_num_pages = d.document_num_pages || \"0\";\r\n    var doc_num_words = d.num_words;\r\n    var doc_reading_time = (d['num_words'] / 180.0).toFixed(0)\r\n\r\n    var doc_source_reference = d[\"description\"] || \"(unknown)\";\r\n\r\n    var doc_trust_score = 2.5\r\n    var doc_readability = 1.7\r\n\r\n\r\n\r\n\r\n    const cardStyle: CSSProperties = {\r\n        height: \"100%\",\r\n        border: \"none\"\r\n    }\r\n    const iconStyle: CSSProperties = {\r\n        fontSize: '32px',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n\r\n    }\r\n\r\n    const getIconForDocumentClassification = (d: any) => {\r\n        if (d.source == 'document')\r\n            return < FilePdfOutlined style={iconStyle} alt={\"Document\"} />\r\n\r\n        if (d.source == 'web_article')\r\n            return < GlobalOutlined style={iconStyle} alt={\"web article\"} />\r\n\r\n        if (d.source == 'wikipedia')\r\n            return < SolutionOutlined style={iconStyle} alt={\"Wikipedia\"} />\r\n\r\n        return < FileUnknownOutlined style={iconStyle} alt={\"Unknown\"} />\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Row gutter={[24, 16]} style={{ height: '100%' }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n                <Row gutter={[24, 16]}>\r\n                    <Col span={24} style={{ textAlign: \"center\" }}>\r\n                        <Title level={4} ellipsis>{doc_title}</Title>\r\n                        <Paragraph ellipsis>\r\n                            <Text type=\"secondary\">by:</Text> <Text style={{ wordWrap: \"break-word\" }} >{doc_authors}</Text><p />\r\n                            <Text type=\"secondary\">published:</Text> <Text>{doc_create_date} ({doc_create_age})</Text><p />\r\n                            <Text type=\"secondary\">source:</Text> {doc_source_reference}<p />\r\n                        </Paragraph>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n                <Tabs tabPosition=\"left\">\r\n                    <TabPane tab=\"Summary\" key=\"summary\">\r\n                        <Row gutter={[24, 16]}>\r\n                            <Col>\r\n                                <ReadableContent title=\"Summary\" paragraphs={d.summary_sentences} mark_chunks={d.common_noun_chunks} />\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Info\" key=\"info\">\r\n                        <Card style={cardStyle}>\r\n                            <Row gutter={[24, 16]}>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Trust score\" prefix={<Rate disabled allowHalf defaultValue={doc_trust_score} />} value=\" \" />\r\n                                </Col>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Text readability\" prefix={<Rate disabled allowHalf defaultValue={doc_readability} />} value=\" \" />\r\n                                </Col>\r\n\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Document type\" prefix={getIconForDocumentClassification(d)} value={d.source} />\r\n                                </Col>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Original Language\" prefix={<TranslationOutlined />} value={doc_language} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter={[24, 16]}>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Document length\" prefix={<FileUnknownOutlined />} suffix=\"pages\" value={doc_num_pages} />\r\n                                </Col>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Estimated reading time\" suffix={\"minutes\"} value={doc_reading_time} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter={[24, 16]}>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"Text length\" prefix={<HighlightOutlined />} suffix=\"words\" value={doc_num_words} />\r\n                                </Col>\r\n                                <Col span=\"12\">\r\n                                    <Statistic title=\"More info\" prefix={<Link href=\"#\">Click here...</Link>} value=\" \" />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Card>\r\n                    </TabPane>\r\n\r\n                    <TabPane tab=\"Topics and Concepts\" key=\"topics\">\r\n                        <Card style={cardStyle} title=\"Key Topics and concepts\">\r\n                            <Row gutter={[24, 16]}>\r\n                                <Col span=\"8\">\r\n                                    <Space direction=\"vertical\">\r\n                                        <MedicineBoxOutlined style={iconStyle} /> Medication\r\n                                <Divider />\r\n                                        { }\r\n                                    </Space>\r\n                                </Col>\r\n                                <Col span=\"8\">\r\n                                    <Space direction=\"vertical\">\r\n                                        <LineChartOutlined style={iconStyle} /> Threatments\r\n                                <Divider />\r\n                                        { }\r\n                                    </Space>\r\n\r\n                                </Col>\r\n                                <Col span=\"8\">\r\n                                    <Space direction=\"vertical\">\r\n                                        <PartitionOutlined style={iconStyle} /> Body Parts\r\n                                    </Space>\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Card>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Further reading\" key=\"resources\">\r\n                        <Card style={cardStyle} title=\"Further reading\">\r\n                            <Row gutter={[24, 16]}>\r\n                                <Col span=\"24\">\r\n                                    TBD\r\n                        </Col>\r\n                            </Row>\r\n                        </Card>\r\n\r\n                    </TabPane>\r\n\r\n                </Tabs>\r\n            </Col>\r\n\r\n\r\n\r\n            <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n            </Col>\r\n\r\n\r\n        </Row>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ResultPage","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\ReadableContent.tsx",["198","199","200","201","202","203","204","205","206","207"],"import { BaseSyntheticEvent, CSSProperties, SyntheticEvent, useEffect, useState } from 'react';\r\n\r\nimport { Card, Input, Button, Typography, Switch, Affix, Space, Popover } from 'antd';\r\n\r\nimport { useAnalysisContext } from './Contexts';\r\nimport '../App.less';\r\n\r\nimport { TranslationOutlined } from '@ant-design/icons';\r\n\r\n// ES module\r\n//import Editor from 'react-medium-editor';\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\nimport gfm from 'remark-gfm'\r\nimport Text from 'antd/lib/typography/Text';\r\nimport DefinitionPopover from './DefinitionPopover';\r\n\r\n\r\n\r\n\r\nconst { Paragraph, Link } = Typography;\r\n//const { Search, TextArea } = Input;\r\n\r\n\r\n\r\nconst IR_TOKEN_URL = \"http://localhost:5000/getIRToken\"\r\n\r\n\r\n/**\r\n * \r\n * @param props.paragraphs: [str]\r\n * @param props.title : str\r\n * \r\n */\r\nfunction ReadableContent(props: any) {\r\n    const ctx = useAnalysisContext()\r\n\r\n    const [selectedText, setSelectedText] = useState<string>(\"\")\r\n\r\n\r\n\r\n    // Reference to div wrapping the markdown component. Used for Affix positioning etc,\r\n    const [summaryContainer, setSummaryContainer] = useState<HTMLDivElement | null>(null)\r\n\r\n\r\n\r\n    var translateToLanguage = ctx.options.autoTranslateLanguage\r\n    var originalLanguage = ctx.analysisResult.meta['language'] || \"en-US\"\r\n\r\n    var contentParagraphs = props.paragraphs || [\"Unfortunatly, this text is unavailable\"]\r\n\r\n    // FIXME maybe use multiple \"chunks\" ?\r\n    var markdownSource = \"* \" + contentParagraphs.join(\"\\n* \")\r\n    if (props.mark_chunks) {\r\n        console.log(\"Mark chunks: \", props.mark_chunks)\r\n        for (var c in props.mark_chunks) {\r\n            var text = props.mark_chunks[c][0]\r\n            markdownSource = markdownSource.replace(text, \"[\" + text + \"](#)\")\r\n            //console.log(markdownSource)\r\n        }\r\n    }\r\n    const renderers = {\r\n        link: (link: any) => {\r\n            //console.log(link)\r\n            return <Text mark>{link.node.children[0].value}</Text>\r\n        }\r\n    }\r\n\r\n    // Render markdown to html (for immersive reader)\r\n    var htmlContent = renderToStaticMarkup(<ReactMarkdown renderers={renderers} plugins={[gfm]} children={markdownSource} />)\r\n    //console.log(\"htmlContent\", htmlContent)\r\n\r\n    var chunks = [{\r\n        content: htmlContent,\r\n        mimeType: \"text/html\"\r\n    }]\r\n    //console.log(\"chunks\", chunks);\r\n\r\n    /** Data sent to the Immersive reader */\r\n    // MIME types https://docs.microsoft.com/azure/cognitive-services/immersive-reader/reference#chunk\r\n    const data = {\r\n        title: props.title || \"Summary\",\r\n        chunks: chunks\r\n    };\r\n    /** Options sent to the Immersive reader */\r\n    // https://docs.microsoft.com/azure/cognitive-services/immersive-reader/reference#options\r\n    const irOptions = {\r\n        \"onExit\": exitCallback,\r\n        \"uiZIndex\": 2000,\r\n        \"uiLang\": translateToLanguage || \"en-US\",\r\n        \"readAloudOptions\": {\r\n            voice: \"Female\",\r\n            speed: 1.0,\r\n            autoPlay: true,\r\n\r\n        },\r\n        \"translationOptions\": {\r\n            language: translateToLanguage || \"en-US\",\r\n            autoEnableDocumentTranslation: ctx.options.autoTranslate\r\n        },\r\n        \"displayOptions\": {\r\n            textSize: 20\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Request token / subdomain for Immersive Reader\r\n     */\r\n    function getTokenAndSubdomainAsync() {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"accept\": \"application/json\"\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            fetch(IR_TOKEN_URL, options)\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    console.log(\"IR token\", json)\r\n                    resolve(json)\r\n\r\n                })\r\n                .catch(e => {\r\n                    console.log(e)\r\n                    reject(e)\r\n                })\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This launches the Immersive Reader in an iframe (\"fullscreen\" overlay).\r\n     * 'ImmersiveReader' is a global (window.xxx) object loaded in index.hhtml.  \r\n     */\r\n    function launchReader() {\r\n        getTokenAndSubdomainAsync()\r\n            .then(function (response: any) {\r\n                const token = response[\"token\"];\r\n                const subdomain = response[\"subdomain\"];\r\n\r\n                // FIXME clean way to get object from, this just grabs from global scope (script loaded inside index.html)\r\n                const ImmersiveReader: any = Object(window)['ImmersiveReader']\r\n\r\n                ImmersiveReader.launchAsync(token, subdomain, data, irOptions)\r\n                    .catch(function (error: any) {\r\n                        alert(\"We're sorry, something went wrong starting the Immersive Reader.\");\r\n                        console.log(error);\r\n                    });\r\n\r\n            })\r\n            .catch(function (error) {\r\n                alert(\"An error occured while requesting the Immersive Reader credentials from our API.\");\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function exitCallback() {\r\n        console.log(\"Immersive reader closed\");\r\n        /**\r\n         * TODO cleanup\r\n         */\r\n    }\r\n\r\n    const toggleAutotranslate = () => {\r\n        // update with new options object, with autoTranslate toggled\r\n        ctx.setOptions(Object.assign({}, ctx.options, { autoTranslate: !ctx.options.autoTranslate }))\r\n\r\n    }\r\n\r\n    let btnOpenIR = (<Button key={1} size=\"small\" onClick={launchReader} type=\"primary\" ghost>\r\n        Immersive Reader <TranslationOutlined />\r\n    </Button>)\r\n\r\n    let switchAutoTranslate = (<Switch size=\"small\" title=\"Translate\"\r\n        onClick={toggleAutotranslate}\r\n        checked={ctx.options.autoTranslate}\r\n        unCheckedChildren={originalLanguage.substr(0, 2)}\r\n        checkedChildren={String(translateToLanguage).substr(0, 2)} />)\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * After a touch / mouse up event, check if we have some selected text.\r\n     * If so, display the \"Dictionary lookup\" popover\r\n     * @param evt \r\n     */\r\n    const handleDictionaryLookup = (evt: any) => {\r\n        try {\r\n            var selectedText = String(evt.view.getSelection().getRangeAt(0).cloneContents().textContent).trim();\r\n            if (selectedText != \"\") {\r\n                console.log(\"Selected text:\", selectedText)\r\n\r\n                setSelectedText(selectedText)\r\n            }\r\n            else {\r\n                console.log(\"No text selected\", selectedText)\r\n                setSelectedText(\"\")\r\n\r\n            }\r\n        }\r\n        catch (e) {\r\n            setSelectedText(\"\")\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DefinitionPopover lookupText={selectedText} visible={selectedText != \"\"}>\r\n                <Card bordered={false} headStyle={{ padding: 0 }} onTouchEnd={handleDictionaryLookup} onMouseUp={handleDictionaryLookup}>\r\n                    <Affix style={{ position: 'absolute', bottom: 15, right: 40 }} target={() => summaryContainer} >\r\n                        <Space>{btnOpenIR}\r\n                            {switchAutoTranslate}</Space>\r\n                    </Affix>\r\n                    <div ref={setSummaryContainer} style={{ padding: 0, margin: 0 }}>\r\n                        <ReactMarkdown plugins={[gfm]} allowDangerousHtml children={htmlContent} />\r\n                    </div>\r\n\r\n\r\n                </Card>\r\n            </DefinitionPopover>\r\n        </>\r\n    )\r\n}\r\nexport default ReadableContent;\r\n\r\n","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\StartPage.tsx",["208","209","210"],"import React, { FC } from 'react';\r\nimport '../App.less';\r\n\r\nimport { Row, Col, PageHeader, } from 'antd';\r\n\r\n\r\nimport UploadCard from './UploadCard';\r\nimport UrlCard from './UrlCard';\r\n\r\nimport { useAnalysisContext } from './Contexts'\r\n\r\n\r\nconst avatarGreeting = \"Welcome\"\r\nconst avatarMessage = \"Please show the the document you want to understand better\"\r\n\r\n\r\nconst StartPage: FC = () => {\r\n    const ctx = useAnalysisContext()\r\n\r\n    console.log(\"StartPage context\", ctx)\r\n\r\n    return (\r\n        <>\r\n\r\n            <Row gutter={[24, 16]} style={{ height: '100%' }}>\r\n                <Col xs={24} sm={24} md={24} lg={12} xl={12}>\r\n                    <UploadCard />\r\n                </Col>\r\n                <Col xs={24} sm={24} md={24} lg={12} xl={12}>\r\n                    <UrlCard />\r\n                </Col>\r\n\r\n            </Row>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default StartPage;","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\AnalyzingSpinnerPage.tsx",["211","212"],"import React, { FC } from 'react';\r\nimport '../App.less';\r\n\r\nimport { Row, Col, PageHeader, Spin, message } from 'antd';\r\n\r\n\r\n\r\n\r\n\r\nconst AnalyzingSpinnerPage: FC = () => {\r\n    return (\r\n        <>\r\n\r\n            <Row gutter={[24, 16]} style={{ height: '100%' }}>\r\n                <Col style={{ 'textAlign': 'center', paddingTop: 100 }} xs={24} sm={24} md={24} lg={24} xl={24}>\r\n                    <Spin size=\"large\" style={{ margin: 'auto' }} />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default AnalyzingSpinnerPage;","C:\\Users\\flgeorg\\repositories\\medjargonbuster-webapp\\src\\analyze\\DefinitionPopover.tsx",["213","214","215","216","217","218","219","220","221","222","223"],"import { useEffect, useState, createRef } from 'react';\r\nimport { useRequest } from 'ahooks';\r\n\r\nimport { Card, Input, Button, Typography, Switch, Affix, Space, Popover, Skeleton, Comment, Avatar } from 'antd';\r\n\r\nimport { useAnalysisContext } from './Contexts';\r\nimport '../App.less';\r\n\r\nimport { TranslationOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst { Paragraph, Text } = Typography\r\n\r\n\r\nfunction DefinitionPopover(props: any) {\r\n    const ctx = useAnalysisContext()\r\n\r\n    const [data, setData] = useState<object | null>(null)\r\n\r\n\r\n    const lookupText = props.lookupText;\r\n\r\n\r\n    const getDefinitionFromAPI = (): Promise<object> => {\r\n        return new Promise(async (resolve) => {\r\n\r\n            const term = lookupText\r\n            console.log(\"Looking up definition of \", term)\r\n            if (term != \"\") {\r\n\r\n                var response = await fetch(\"http://localhost:5000/definition?term=\" + term)\r\n                console.log(response)\r\n                var json = await response.json()\r\n                console.log(json)\r\n\r\n                resolve(json)\r\n            }\r\n\r\n\r\n        })\r\n    }\r\n\r\n    const { loading, run } = useRequest(getDefinitionFromAPI,\r\n        {\r\n            manual: true,\r\n\r\n            onSuccess: (result, params) => {\r\n                console.log(\"onSuccess\", result, params)\r\n                setData(result)\r\n            }\r\n        });\r\n\r\n\r\n    const getDefinitionContent = (definitionData: any) => {\r\n        console.log(definitionData)\r\n        if (definitionData && definitionData.definitions && typeof definitionData.definitions[0] === 'object') {\r\n            var first = definitionData.definitions[0]\r\n            var shortdef = first.shortdef.join(\"\")\r\n            var phoneticString = \"/\" + first.hwi.hw + \"/\"\r\n            var termSource = first.meta.src;\r\n            var stems = first.meta.stems.join (\", \")\r\n    \r\n    \r\n    \r\n            return (\r\n                <Paragraph ellipsis>\r\n                    <Space direction=\"vertical\" size=\"small\"  style={{maxWidth: '400px', wordWrap: 'break-word'}}>\r\n                       <Text mark>{phoneticString}</Text>\r\n                        <Text type=\"secondary\">{stems} ({termSource})</Text>\r\n                        <Text strong style={{wordWrap: 'break-word'}}>{shortdef}</Text>\r\n\r\n                    </Space>\r\n                </Paragraph>\r\n    \r\n            )\r\n    \r\n        }\r\n        else {\r\n            return (<Paragraph>Sorry, I couldn't find a definition for '{props.lookupText}'</Paragraph>)\r\n        }\r\n\r\n    }\r\n\r\n    const getPopoverContent = () => {\r\n\r\n\r\n        // if we render \"invisible\", clear the data\r\n        if (!props.visible) {\r\n            setData(null)\r\n            return (<></>);\r\n        }\r\n\r\n        // return loading skeleton, if we're already loading\r\n        if (loading) {\r\n            return (\r\n                <Skeleton active >\r\n                </Skeleton>\r\n            )\r\n\r\n        }\r\n\r\n        // visible, but not already loading? Trigger the request\r\n        if (!data) {\r\n            run()\r\n        }\r\n\r\n        // visible, not loading\r\n        if (data) {\r\n            return (\r\n                <Comment\r\n                    style={{maxWidth: '350px'}}\r\n                    author={<a>{props.lookupText}</a>}\r\n                    avatar={<Avatar src=\"/img/avatar.png\" alt=\"MedJargonBuster\" />}\r\n                    content={getDefinitionContent(data)}>\r\n                </Comment>\r\n            );\r\n        }\r\n        /*         if (error) {\r\n                    <Comment\r\n                        author={<a>{props.lookupText}</a>}\r\n                        avatar={<Avatar src=\"/img/avatar\" alt=\"MedJargonBuster\" />}\r\n                        content={<div>Sorry, I couldn't look it up.</div>}>\r\n                    </Comment>\r\n                    console.log(error);\r\n        \r\n                } */\r\n\r\n    }\r\n\r\n    const onVisibleChange = (visible: boolean) => {\r\n        console.log(`onVisibleChange: ${visible}`)\r\n\r\n    }\r\n\r\n    return (\r\n        <Popover arrowPointAtCenter onVisibleChange={onVisibleChange} placement=\"top\" content={getPopoverContent} title=\"Definition\" visible={props.visible}>\r\n            {props.children}\r\n        </Popover>\r\n    )\r\n}\r\n\r\nexport default DefinitionPopover;",["224","225"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\index.tsx",[],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\reportWebVitals.ts",[],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\App.tsx",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\Analyze.tsx",["265","266","267","268","269","270","271","272","273","274","275","276","277"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\home\\Home.tsx",[],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\AnalyzingSpinnerPage.tsx",["278","279"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\Contexts.tsx",[],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\StartPage.tsx",["280","281","282"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\ResultPage.tsx",["283","284","285","286","287","288","289","290","291"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\UrlCard.tsx",["292","293"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\UploadCard.tsx",["294","295"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\ReadableContent.tsx",["296","297","298","299","300","301","302","303","304","305"],"C:\\Users\\flgeorg\\repositories\\summed.org\\summed-webapp\\src\\analyze\\DefinitionPopover.tsx",["306","307","308","309","310","311","312","313","314","315","316"],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":1,"column":21,"nodeType":"323","messageId":"324","endLine":1,"endColumn":29},{"ruleId":"321","severity":1,"message":"325","line":4,"column":18,"nodeType":"323","messageId":"324","endLine":4,"endColumn":22},{"ruleId":"321","severity":1,"message":"326","line":4,"column":24,"nodeType":"323","messageId":"324","endLine":4,"endColumn":29},{"ruleId":"321","severity":1,"message":"327","line":4,"column":31,"nodeType":"323","messageId":"324","endLine":4,"endColumn":37},{"ruleId":"321","severity":1,"message":"328","line":4,"column":39,"nodeType":"323","messageId":"324","endLine":4,"endColumn":44},{"ruleId":"321","severity":1,"message":"329","line":4,"column":46,"nodeType":"323","messageId":"324","endLine":4,"endColumn":51},{"ruleId":"321","severity":1,"message":"330","line":9,"column":3,"nodeType":"323","messageId":"324","endLine":9,"endColumn":17},{"ruleId":"321","severity":1,"message":"331","line":9,"column":19,"nodeType":"323","messageId":"324","endLine":9,"endColumn":31},{"ruleId":"321","severity":1,"message":"332","line":10,"column":3,"nodeType":"323","messageId":"324","endLine":10,"endColumn":22},{"ruleId":"321","severity":1,"message":"333","line":10,"column":24,"nodeType":"323","messageId":"324","endLine":10,"endColumn":35},{"ruleId":"321","severity":1,"message":"334","line":11,"column":3,"nodeType":"323","messageId":"324","endLine":11,"endColumn":15},{"ruleId":"321","severity":1,"message":"335","line":11,"column":17,"nodeType":"323","messageId":"324","endLine":11,"endColumn":35},{"ruleId":"321","severity":1,"message":"336","line":12,"column":3,"nodeType":"323","messageId":"324","endLine":12,"endColumn":17},{"ruleId":"321","severity":1,"message":"337","line":13,"column":3,"nodeType":"323","messageId":"324","endLine":13,"endColumn":15},{"ruleId":"321","severity":1,"message":"338","line":14,"column":3,"nodeType":"323","messageId":"324","endLine":14,"endColumn":18},{"ruleId":"321","severity":1,"message":"339","line":15,"column":3,"nodeType":"323","messageId":"324","endLine":15,"endColumn":21},{"ruleId":"321","severity":1,"message":"340","line":16,"column":3,"nodeType":"323","messageId":"324","endLine":16,"endColumn":18},{"ruleId":"321","severity":1,"message":"341","line":17,"column":3,"nodeType":"323","messageId":"324","endLine":17,"endColumn":19},{"ruleId":"321","severity":1,"message":"342","line":18,"column":3,"nodeType":"323","messageId":"324","endLine":18,"endColumn":18},{"ruleId":"321","severity":1,"message":"343","line":19,"column":3,"nodeType":"323","messageId":"324","endLine":19,"endColumn":22},{"ruleId":"321","severity":1,"message":"344","line":20,"column":3,"nodeType":"323","messageId":"324","endLine":20,"endColumn":15},{"ruleId":"321","severity":1,"message":"345","line":21,"column":3,"nodeType":"323","messageId":"324","endLine":21,"endColumn":17},{"ruleId":"321","severity":1,"message":"346","line":22,"column":3,"nodeType":"323","messageId":"324","endLine":22,"endColumn":18},{"ruleId":"321","severity":1,"message":"347","line":23,"column":3,"nodeType":"323","messageId":"324","endLine":23,"endColumn":18},{"ruleId":"321","severity":1,"message":"348","line":24,"column":3,"nodeType":"323","messageId":"324","endLine":24,"endColumn":20},{"ruleId":"321","severity":1,"message":"349","line":25,"column":3,"nodeType":"323","messageId":"324","endLine":25,"endColumn":20},{"ruleId":"321","severity":1,"message":"350","line":26,"column":3,"nodeType":"323","messageId":"324","endLine":26,"endColumn":20},{"ruleId":"321","severity":1,"message":"351","line":27,"column":3,"nodeType":"323","messageId":"324","endLine":27,"endColumn":16},{"ruleId":"321","severity":1,"message":"352","line":28,"column":3,"nodeType":"323","messageId":"324","endLine":28,"endColumn":18},{"ruleId":"321","severity":1,"message":"353","line":29,"column":3,"nodeType":"323","messageId":"324","endLine":29,"endColumn":16},{"ruleId":"321","severity":1,"message":"354","line":30,"column":3,"nodeType":"323","messageId":"324","endLine":30,"endColumn":15},{"ruleId":"321","severity":1,"message":"355","line":31,"column":3,"nodeType":"323","messageId":"324","endLine":31,"endColumn":13},{"ruleId":"321","severity":1,"message":"356","line":32,"column":3,"nodeType":"323","messageId":"324","endLine":32,"endColumn":15},{"ruleId":"321","severity":1,"message":"357","line":33,"column":3,"nodeType":"323","messageId":"324","endLine":33,"endColumn":22},{"ruleId":"321","severity":1,"message":"358","line":38,"column":8,"nodeType":"323","messageId":"324","endLine":38,"endColumn":13},{"ruleId":"321","severity":1,"message":"359","line":44,"column":3,"nodeType":"323","messageId":"324","endLine":44,"endColumn":7},{"ruleId":"321","severity":1,"message":"360","line":48,"column":9,"nodeType":"323","messageId":"324","endLine":48,"endColumn":15},{"ruleId":"321","severity":1,"message":"361","line":48,"column":26,"nodeType":"323","messageId":"324","endLine":48,"endColumn":32},{"ruleId":"321","severity":1,"message":"362","line":48,"column":34,"nodeType":"323","messageId":"324","endLine":48,"endColumn":39},{"ruleId":"321","severity":1,"message":"363","line":8,"column":5,"nodeType":"323","messageId":"324","endLine":8,"endColumn":21},{"ruleId":"321","severity":1,"message":"364","line":9,"column":5,"nodeType":"323","messageId":"324","endLine":9,"endColumn":17},{"ruleId":"321","severity":1,"message":"365","line":10,"column":5,"nodeType":"323","messageId":"324","endLine":10,"endColumn":19},{"ruleId":"321","severity":1,"message":"366","line":12,"column":5,"nodeType":"323","messageId":"324","endLine":12,"endColumn":26},{"ruleId":"321","severity":1,"message":"367","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":17},{"ruleId":"321","severity":1,"message":"368","line":20,"column":27,"nodeType":"323","messageId":"324","endLine":20,"endColumn":33},{"ruleId":"321","severity":1,"message":"369","line":20,"column":35,"nodeType":"323","messageId":"324","endLine":20,"endColumn":40},{"ruleId":"321","severity":1,"message":"370","line":20,"column":42,"nodeType":"323","messageId":"324","endLine":20,"endColumn":48},{"ruleId":"321","severity":1,"message":"371","line":20,"column":50,"nodeType":"323","messageId":"324","endLine":20,"endColumn":60},{"ruleId":"321","severity":1,"message":"372","line":37,"column":7,"nodeType":"323","messageId":"324","endLine":37,"endColumn":13},{"ruleId":"321","severity":1,"message":"373","line":46,"column":7,"nodeType":"323","messageId":"324","endLine":46,"endColumn":32},{"ruleId":"374","severity":1,"message":"375","line":98,"column":8,"nodeType":"376","endLine":98,"endColumn":42,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":192,"column":18,"nodeType":"380","messageId":"381","endLine":192,"endColumn":20},{"ruleId":"321","severity":1,"message":"382","line":4,"column":16,"nodeType":"323","messageId":"324","endLine":4,"endColumn":21},{"ruleId":"317","replacedBy":"383"},{"ruleId":"319","replacedBy":"384"},{"ruleId":"321","severity":1,"message":"322","line":1,"column":14,"nodeType":"323","messageId":"324","endLine":1,"endColumn":22},{"ruleId":"321","severity":1,"message":"385","line":5,"column":29,"nodeType":"323","messageId":"324","endLine":5,"endColumn":40},{"ruleId":"321","severity":1,"message":"386","line":3,"column":16,"nodeType":"323","messageId":"324","endLine":3,"endColumn":23},{"ruleId":"321","severity":1,"message":"387","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":18},{"ruleId":"321","severity":1,"message":"388","line":5,"column":77,"nodeType":"323","messageId":"324","endLine":5,"endColumn":82},{"ruleId":"321","severity":1,"message":"389","line":24,"column":7,"nodeType":"323","messageId":"324","endLine":24,"endColumn":19},{"ruleId":"321","severity":1,"message":"390","line":35,"column":9,"nodeType":"323","messageId":"324","endLine":35,"endColumn":20},{"ruleId":"321","severity":1,"message":"391","line":39,"column":9,"nodeType":"323","messageId":"324","endLine":39,"endColumn":27},{"ruleId":"321","severity":1,"message":"392","line":40,"column":9,"nodeType":"323","messageId":"324","endLine":40,"endColumn":22},{"ruleId":"321","severity":1,"message":"393","line":41,"column":9,"nodeType":"323","messageId":"324","endLine":41,"endColumn":17},{"ruleId":"378","severity":1,"message":"379","line":73,"column":22,"nodeType":"380","messageId":"381","endLine":73,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":76,"column":22,"nodeType":"380","messageId":"381","endLine":76,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":79,"column":22,"nodeType":"380","messageId":"381","endLine":79,"endColumn":24},{"ruleId":"321","severity":1,"message":"394","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":28},{"ruleId":"321","severity":1,"message":"395","line":1,"column":30,"nodeType":"323","messageId":"324","endLine":1,"endColumn":43},{"ruleId":"321","severity":1,"message":"396","line":1,"column":45,"nodeType":"323","messageId":"324","endLine":1,"endColumn":59},{"ruleId":"321","severity":1,"message":"397","line":1,"column":61,"nodeType":"323","messageId":"324","endLine":1,"endColumn":70},{"ruleId":"321","severity":1,"message":"382","line":3,"column":16,"nodeType":"323","messageId":"324","endLine":3,"endColumn":21},{"ruleId":"321","severity":1,"message":"398","line":3,"column":65,"nodeType":"323","messageId":"324","endLine":3,"endColumn":72},{"ruleId":"321","severity":1,"message":"399","line":22,"column":9,"nodeType":"323","messageId":"324","endLine":22,"endColumn":18},{"ruleId":"321","severity":1,"message":"400","line":22,"column":20,"nodeType":"323","messageId":"324","endLine":22,"endColumn":24},{"ruleId":"378","severity":1,"message":"401","line":196,"column":30,"nodeType":"380","messageId":"381","endLine":196,"endColumn":32},{"ruleId":"378","severity":1,"message":"401","line":216,"column":80,"nodeType":"380","messageId":"381","endLine":216,"endColumn":82},{"ruleId":"321","severity":1,"message":"402","line":4,"column":20,"nodeType":"323","messageId":"324","endLine":4,"endColumn":30},{"ruleId":"321","severity":1,"message":"403","line":13,"column":7,"nodeType":"323","messageId":"324","endLine":13,"endColumn":21},{"ruleId":"321","severity":1,"message":"404","line":14,"column":7,"nodeType":"323","messageId":"324","endLine":14,"endColumn":20},{"ruleId":"321","severity":1,"message":"402","line":4,"column":20,"nodeType":"323","messageId":"324","endLine":4,"endColumn":30},{"ruleId":"321","severity":1,"message":"386","line":4,"column":38,"nodeType":"323","messageId":"324","endLine":4,"endColumn":45},{"ruleId":"321","severity":1,"message":"397","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":19},{"ruleId":"321","severity":1,"message":"405","line":1,"column":31,"nodeType":"323","messageId":"324","endLine":1,"endColumn":40},{"ruleId":"321","severity":1,"message":"406","line":4,"column":10,"nodeType":"323","messageId":"324","endLine":4,"endColumn":14},{"ruleId":"321","severity":1,"message":"382","line":4,"column":16,"nodeType":"323","messageId":"324","endLine":4,"endColumn":21},{"ruleId":"321","severity":1,"message":"407","line":4,"column":23,"nodeType":"323","messageId":"324","endLine":4,"endColumn":29},{"ruleId":"321","severity":1,"message":"370","line":4,"column":43,"nodeType":"323","messageId":"324","endLine":4,"endColumn":49},{"ruleId":"321","severity":1,"message":"408","line":4,"column":51,"nodeType":"323","messageId":"324","endLine":4,"endColumn":56},{"ruleId":"321","severity":1,"message":"357","line":9,"column":10,"nodeType":"323","messageId":"324","endLine":9,"endColumn":29},{"ruleId":"321","severity":1,"message":"409","line":16,"column":11,"nodeType":"323","messageId":"324","endLine":16,"endColumn":14},{"ruleId":"378","severity":1,"message":"401","line":29,"column":22,"nodeType":"380","messageId":"381","endLine":29,"endColumn":24},{"ruleId":"410","severity":1,"message":"411","line":112,"column":29,"nodeType":"412","endLine":112,"endColumn":32},{"ruleId":"317","replacedBy":"413"},{"ruleId":"319","replacedBy":"414"},{"ruleId":"321","severity":1,"message":"322","line":1,"column":21,"nodeType":"323","messageId":"324","endLine":1,"endColumn":29},{"ruleId":"321","severity":1,"message":"325","line":4,"column":18,"nodeType":"323","messageId":"324","endLine":4,"endColumn":22},{"ruleId":"321","severity":1,"message":"326","line":4,"column":24,"nodeType":"323","messageId":"324","endLine":4,"endColumn":29},{"ruleId":"321","severity":1,"message":"327","line":4,"column":31,"nodeType":"323","messageId":"324","endLine":4,"endColumn":37},{"ruleId":"321","severity":1,"message":"328","line":4,"column":39,"nodeType":"323","messageId":"324","endLine":4,"endColumn":44},{"ruleId":"321","severity":1,"message":"329","line":4,"column":46,"nodeType":"323","messageId":"324","endLine":4,"endColumn":51},{"ruleId":"321","severity":1,"message":"330","line":9,"column":3,"nodeType":"323","messageId":"324","endLine":9,"endColumn":17},{"ruleId":"321","severity":1,"message":"331","line":9,"column":19,"nodeType":"323","messageId":"324","endLine":9,"endColumn":31},{"ruleId":"321","severity":1,"message":"332","line":10,"column":3,"nodeType":"323","messageId":"324","endLine":10,"endColumn":22},{"ruleId":"321","severity":1,"message":"333","line":10,"column":24,"nodeType":"323","messageId":"324","endLine":10,"endColumn":35},{"ruleId":"321","severity":1,"message":"334","line":11,"column":3,"nodeType":"323","messageId":"324","endLine":11,"endColumn":15},{"ruleId":"321","severity":1,"message":"335","line":11,"column":17,"nodeType":"323","messageId":"324","endLine":11,"endColumn":35},{"ruleId":"321","severity":1,"message":"336","line":12,"column":3,"nodeType":"323","messageId":"324","endLine":12,"endColumn":17},{"ruleId":"321","severity":1,"message":"337","line":13,"column":3,"nodeType":"323","messageId":"324","endLine":13,"endColumn":15},{"ruleId":"321","severity":1,"message":"338","line":14,"column":3,"nodeType":"323","messageId":"324","endLine":14,"endColumn":18},{"ruleId":"321","severity":1,"message":"339","line":15,"column":3,"nodeType":"323","messageId":"324","endLine":15,"endColumn":21},{"ruleId":"321","severity":1,"message":"340","line":16,"column":3,"nodeType":"323","messageId":"324","endLine":16,"endColumn":18},{"ruleId":"321","severity":1,"message":"341","line":17,"column":3,"nodeType":"323","messageId":"324","endLine":17,"endColumn":19},{"ruleId":"321","severity":1,"message":"342","line":18,"column":3,"nodeType":"323","messageId":"324","endLine":18,"endColumn":18},{"ruleId":"321","severity":1,"message":"343","line":19,"column":3,"nodeType":"323","messageId":"324","endLine":19,"endColumn":22},{"ruleId":"321","severity":1,"message":"344","line":20,"column":3,"nodeType":"323","messageId":"324","endLine":20,"endColumn":15},{"ruleId":"321","severity":1,"message":"345","line":21,"column":3,"nodeType":"323","messageId":"324","endLine":21,"endColumn":17},{"ruleId":"321","severity":1,"message":"346","line":22,"column":3,"nodeType":"323","messageId":"324","endLine":22,"endColumn":18},{"ruleId":"321","severity":1,"message":"347","line":23,"column":3,"nodeType":"323","messageId":"324","endLine":23,"endColumn":18},{"ruleId":"321","severity":1,"message":"348","line":24,"column":3,"nodeType":"323","messageId":"324","endLine":24,"endColumn":20},{"ruleId":"321","severity":1,"message":"349","line":25,"column":3,"nodeType":"323","messageId":"324","endLine":25,"endColumn":20},{"ruleId":"321","severity":1,"message":"350","line":26,"column":3,"nodeType":"323","messageId":"324","endLine":26,"endColumn":20},{"ruleId":"321","severity":1,"message":"351","line":27,"column":3,"nodeType":"323","messageId":"324","endLine":27,"endColumn":16},{"ruleId":"321","severity":1,"message":"352","line":28,"column":3,"nodeType":"323","messageId":"324","endLine":28,"endColumn":18},{"ruleId":"321","severity":1,"message":"353","line":29,"column":3,"nodeType":"323","messageId":"324","endLine":29,"endColumn":16},{"ruleId":"321","severity":1,"message":"354","line":30,"column":3,"nodeType":"323","messageId":"324","endLine":30,"endColumn":15},{"ruleId":"321","severity":1,"message":"355","line":31,"column":3,"nodeType":"323","messageId":"324","endLine":31,"endColumn":13},{"ruleId":"321","severity":1,"message":"356","line":32,"column":3,"nodeType":"323","messageId":"324","endLine":32,"endColumn":15},{"ruleId":"321","severity":1,"message":"357","line":33,"column":3,"nodeType":"323","messageId":"324","endLine":33,"endColumn":22},{"ruleId":"321","severity":1,"message":"358","line":38,"column":8,"nodeType":"323","messageId":"324","endLine":38,"endColumn":13},{"ruleId":"321","severity":1,"message":"359","line":44,"column":3,"nodeType":"323","messageId":"324","endLine":44,"endColumn":7},{"ruleId":"321","severity":1,"message":"360","line":48,"column":9,"nodeType":"323","messageId":"324","endLine":48,"endColumn":15},{"ruleId":"321","severity":1,"message":"361","line":48,"column":26,"nodeType":"323","messageId":"324","endLine":48,"endColumn":32},{"ruleId":"321","severity":1,"message":"362","line":48,"column":34,"nodeType":"323","messageId":"324","endLine":48,"endColumn":39},{"ruleId":"321","severity":1,"message":"363","line":8,"column":5,"nodeType":"323","messageId":"324","endLine":8,"endColumn":21},{"ruleId":"321","severity":1,"message":"364","line":9,"column":5,"nodeType":"323","messageId":"324","endLine":9,"endColumn":17},{"ruleId":"321","severity":1,"message":"365","line":10,"column":5,"nodeType":"323","messageId":"324","endLine":10,"endColumn":19},{"ruleId":"321","severity":1,"message":"366","line":12,"column":5,"nodeType":"323","messageId":"324","endLine":12,"endColumn":26},{"ruleId":"321","severity":1,"message":"367","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":17},{"ruleId":"321","severity":1,"message":"368","line":20,"column":27,"nodeType":"323","messageId":"324","endLine":20,"endColumn":33},{"ruleId":"321","severity":1,"message":"369","line":20,"column":35,"nodeType":"323","messageId":"324","endLine":20,"endColumn":40},{"ruleId":"321","severity":1,"message":"370","line":20,"column":42,"nodeType":"323","messageId":"324","endLine":20,"endColumn":48},{"ruleId":"321","severity":1,"message":"371","line":20,"column":50,"nodeType":"323","messageId":"324","endLine":20,"endColumn":60},{"ruleId":"321","severity":1,"message":"372","line":37,"column":7,"nodeType":"323","messageId":"324","endLine":37,"endColumn":13},{"ruleId":"321","severity":1,"message":"373","line":46,"column":7,"nodeType":"323","messageId":"324","endLine":46,"endColumn":32},{"ruleId":"374","severity":1,"message":"375","line":98,"column":8,"nodeType":"376","endLine":98,"endColumn":42,"suggestions":"415"},{"ruleId":"378","severity":1,"message":"379","line":192,"column":18,"nodeType":"380","messageId":"381","endLine":192,"endColumn":20},{"ruleId":"321","severity":1,"message":"402","line":4,"column":20,"nodeType":"323","messageId":"324","endLine":4,"endColumn":30},{"ruleId":"321","severity":1,"message":"386","line":4,"column":38,"nodeType":"323","messageId":"324","endLine":4,"endColumn":45},{"ruleId":"321","severity":1,"message":"402","line":4,"column":20,"nodeType":"323","messageId":"324","endLine":4,"endColumn":30},{"ruleId":"321","severity":1,"message":"403","line":13,"column":7,"nodeType":"323","messageId":"324","endLine":13,"endColumn":21},{"ruleId":"321","severity":1,"message":"404","line":14,"column":7,"nodeType":"323","messageId":"324","endLine":14,"endColumn":20},{"ruleId":"321","severity":1,"message":"388","line":5,"column":77,"nodeType":"323","messageId":"324","endLine":5,"endColumn":82},{"ruleId":"321","severity":1,"message":"389","line":24,"column":7,"nodeType":"323","messageId":"324","endLine":24,"endColumn":19},{"ruleId":"321","severity":1,"message":"390","line":35,"column":9,"nodeType":"323","messageId":"324","endLine":35,"endColumn":20},{"ruleId":"321","severity":1,"message":"391","line":39,"column":9,"nodeType":"323","messageId":"324","endLine":39,"endColumn":27},{"ruleId":"321","severity":1,"message":"392","line":40,"column":9,"nodeType":"323","messageId":"324","endLine":40,"endColumn":22},{"ruleId":"321","severity":1,"message":"393","line":41,"column":9,"nodeType":"323","messageId":"324","endLine":41,"endColumn":17},{"ruleId":"378","severity":1,"message":"379","line":73,"column":22,"nodeType":"380","messageId":"381","endLine":73,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":76,"column":22,"nodeType":"380","messageId":"381","endLine":76,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":79,"column":22,"nodeType":"380","messageId":"381","endLine":79,"endColumn":24},{"ruleId":"321","severity":1,"message":"386","line":3,"column":16,"nodeType":"323","messageId":"324","endLine":3,"endColumn":23},{"ruleId":"321","severity":1,"message":"387","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":18},{"ruleId":"321","severity":1,"message":"322","line":1,"column":14,"nodeType":"323","messageId":"324","endLine":1,"endColumn":22},{"ruleId":"321","severity":1,"message":"385","line":5,"column":29,"nodeType":"323","messageId":"324","endLine":5,"endColumn":40},{"ruleId":"321","severity":1,"message":"394","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":28},{"ruleId":"321","severity":1,"message":"395","line":1,"column":30,"nodeType":"323","messageId":"324","endLine":1,"endColumn":43},{"ruleId":"321","severity":1,"message":"396","line":1,"column":45,"nodeType":"323","messageId":"324","endLine":1,"endColumn":59},{"ruleId":"321","severity":1,"message":"397","line":1,"column":61,"nodeType":"323","messageId":"324","endLine":1,"endColumn":70},{"ruleId":"321","severity":1,"message":"382","line":3,"column":16,"nodeType":"323","messageId":"324","endLine":3,"endColumn":21},{"ruleId":"321","severity":1,"message":"398","line":3,"column":65,"nodeType":"323","messageId":"324","endLine":3,"endColumn":72},{"ruleId":"321","severity":1,"message":"399","line":22,"column":9,"nodeType":"323","messageId":"324","endLine":22,"endColumn":18},{"ruleId":"321","severity":1,"message":"400","line":22,"column":20,"nodeType":"323","messageId":"324","endLine":22,"endColumn":24},{"ruleId":"378","severity":1,"message":"401","line":196,"column":30,"nodeType":"380","messageId":"381","endLine":196,"endColumn":32},{"ruleId":"378","severity":1,"message":"401","line":216,"column":80,"nodeType":"380","messageId":"381","endLine":216,"endColumn":82},{"ruleId":"321","severity":1,"message":"397","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":19},{"ruleId":"321","severity":1,"message":"405","line":1,"column":31,"nodeType":"323","messageId":"324","endLine":1,"endColumn":40},{"ruleId":"321","severity":1,"message":"406","line":4,"column":10,"nodeType":"323","messageId":"324","endLine":4,"endColumn":14},{"ruleId":"321","severity":1,"message":"382","line":4,"column":16,"nodeType":"323","messageId":"324","endLine":4,"endColumn":21},{"ruleId":"321","severity":1,"message":"407","line":4,"column":23,"nodeType":"323","messageId":"324","endLine":4,"endColumn":29},{"ruleId":"321","severity":1,"message":"370","line":4,"column":43,"nodeType":"323","messageId":"324","endLine":4,"endColumn":49},{"ruleId":"321","severity":1,"message":"408","line":4,"column":51,"nodeType":"323","messageId":"324","endLine":4,"endColumn":56},{"ruleId":"321","severity":1,"message":"357","line":9,"column":10,"nodeType":"323","messageId":"324","endLine":9,"endColumn":29},{"ruleId":"321","severity":1,"message":"409","line":16,"column":11,"nodeType":"323","messageId":"324","endLine":16,"endColumn":14},{"ruleId":"378","severity":1,"message":"401","line":29,"column":22,"nodeType":"380","messageId":"381","endLine":29,"endColumn":24},{"ruleId":"410","severity":1,"message":"411","line":112,"column":29,"nodeType":"412","endLine":112,"endColumn":32},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'Image' is defined but never used.","'Avatar' is defined but never used.","'Space' is defined but never used.","'Steps' is defined but never used.","'UploadOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'AudioFilled' is defined but never used.","'LinkOutlined' is defined but never used.","'MedicineBoxTwoTone' is defined but never used.","'CameraOutlined' is defined but never used.","'BulbOutlined' is defined but never used.","'ControlOutlined' is defined but never used.","'ExperimentOutlined' is defined but never used.","'FilePdfOutlined' is defined but never used.","'FileWordOutlined' is defined but never used.","'FilePptOutlined' is defined but never used.","'FileUnknownOutlined' is defined but never used.","'HomeOutlined' is defined but never used.","'IdcardOutlined' is defined but never used.","'MessageOutlined' is defined but never used.","'LoadingOutlined' is defined but never used.","'NodeIndexOutlined' is defined but never used.","'PartitionOutlined' is defined but never used.","'PaperClipOutlined' is defined but never used.","'RobotOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'SoundOutlined' is defined but never used.","'StarOutlined' is defined but never used.","'StarFilled' is defined but never used.","'TagsOutlined' is defined but never used.","'TranslationOutlined' is defined but never used.","'Title' is defined but never used.","'Link' is defined but never used.","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","'HourglassTwoTone' is defined but never used.","'HeartTwoTone' is defined but never used.","'SettingTwoTone' is defined but never used.","'QuestionCircleTwoTone' is defined but never used.","'Paragraph' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useHistory' is defined but never used.","'ROUTES' is assigned a value but never used.","'EXTRACT_TEXT_ENDPOINT_URL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'hasError'. Either include it or remove the dependency array.","ArrayExpression",["418"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Input' is defined but never used.",["416"],["417"],"'UploadProps' is defined but never used.","'message' is defined but never used.","'AnchorLink' is defined but never used.","'Radio' is defined but never used.","'IR_TOKEN_URL' is assigned a value but never used.","'summaryHTML' is assigned a value but never used.","'doc_classification' is assigned a value but never used.","'doc_extractor' is assigned a value but never used.","'doc_type' is assigned a value but never used.","'BaseSyntheticEvent' is defined but never used.","'CSSProperties' is defined but never used.","'SyntheticEvent' is defined but never used.","'useEffect' is defined but never used.","'Popover' is defined but never used.","'Paragraph' is assigned a value but never used.","'Link' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'PageHeader' is defined but never used.","'avatarGreeting' is assigned a value but never used.","'avatarMessage' is assigned a value but never used.","'createRef' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'Affix' is defined but never used.","'ctx' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["416"],["417"],["419"],"no-global-assign","no-unsafe-negation",{"desc":"420","fix":"421"},{"desc":"420","fix":"422"},"Update the dependencies array to be: [extractionResult, analysisResult, hasError]",{"range":"423","text":"424"},{"range":"425","text":"424"},[2877,2911],"[extractionResult, analysisResult, hasError]",[2877,2911]]